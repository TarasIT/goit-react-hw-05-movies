{"version":3,"file":"static/js/247.27775282.chunk.js","mappings":"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","sources":["components/Cast/Cast.jsx","components/MoviesRequest/MoviesRequest.jsx","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { movieCastRequest } from 'components/MoviesRequest/MoviesRequest';\n\nconst BASE_IMG_URL = 'https://image.tmdb.org/t/p/w200';\n\nconst Cast = () => {\n  const [movieCast, setMovieCast] = useState(null);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    (async () => {\n      try {\n        const actors = await movieCastRequest(movieId);\n        setMovieCast(actors.cast);\n      } catch (err) {\n        console.error(err);\n      }\n    })();\n  }, [movieId]);\n\n  if (!movieCast) return;\n\n  return (\n    <ul>\n      {movieCast.map(({ name, id, character, profile_path }) => {\n        return (\n          <li key={id}>\n            <img src={`${BASE_IMG_URL}${profile_path}`} alt={name} />\n            <p>{name}</p>\n            <p>Character: {character}</p>\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n\nexport default Cast;\n","const TREND_MOVIES_URL = 'https://api.themoviedb.org/3/trending/movie/day?';\nconst SEARCH_MOVIES_URL = 'https://api.themoviedb.org/3/search/movie?';\nconst MOVIE_INFO_URL = 'https://api.themoviedb.org/3/movie/';\nconst KEY = '308ba57d7f6135bbdbfbab5697860db3';\n\nexport const trendMoviesRequest = async () => {\n  const searchParams = new URLSearchParams({\n    api_key: KEY,\n  });\n  const response = await fetch(`${TREND_MOVIES_URL}${searchParams}`);\n  if (!response.ok) {\n    return Promise.reject(\n      new Error(`Something went wrong with trend movies :(`)\n    );\n  }\n  return response.json();\n};\n\nexport const searchMoviesByKeyWord = async movie => {\n  const searchParams = new URLSearchParams({\n    api_key: KEY,\n    query: movie,\n  });\n  const response = await fetch(`${SEARCH_MOVIES_URL}${searchParams}`);\n  if (!response.ok) {\n    return Promise.reject(\n      new Error(`There are no movies for query '${movie}'!`)\n    );\n  }\n  return response.json();\n};\n\nexport const movieInfoRequest = async id => {\n  const searchParams = new URLSearchParams({\n    api_key: KEY,\n  });\n  const response = await fetch(`${MOVIE_INFO_URL}${id}?${searchParams}`);\n  if (!response.ok) {\n    return Promise.reject(\n      new Error(`There are no information about the movie!`)\n    );\n  }\n  return response.json();\n};\n\nexport const movieCastRequest = async id => {\n  const searchParams = new URLSearchParams({\n    api_key: KEY,\n  });\n  const response = await fetch(\n    `${MOVIE_INFO_URL}${id}/credits?${searchParams}`\n  );\n  if (!response.ok) {\n    return Promise.reject(new Error(`There is no cast of the movie!`));\n  }\n  return response.json();\n};\n\nexport const movieReviewsRequest = async id => {\n  const searchParams = new URLSearchParams({\n    api_key: KEY,\n  });\n  const response = await fetch(\n    `${MOVIE_INFO_URL}${id}/reviews?${searchParams}`\n  );\n  if (!response.ok) {\n    return Promise.reject(new Error(`There are no reviews of the movie!`));\n  }\n  return response.json();\n};\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}"],"names":["useState","movieCast","setMovieCast","movieId","useParams","useEffect","movieCastRequest","actors","cast","console","error","map","name","id","character","profile_path","src","alt","MOVIE_INFO_URL","KEY","trendMoviesRequest","searchParams","URLSearchParams","api_key","fetch","response","ok","Promise","reject","Error","json","searchMoviesByKeyWord","movie","query","movieInfoRequest","movieReviewsRequest","asyncGeneratorStep","gen","resolve","_next","_throw","key","arg","info","value","done","then","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined"],"sourceRoot":""}